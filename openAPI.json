{
  "openapi": "3.0.0",
  "paths": {
    "/segments": {
      "post": {
        "operationId": "SegmentController_createSegment",
        "summary": "Creates a new Segment",
        "description": "This endpoint accepts a name and creates a new Segment with this name",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Contains the name of the new Segment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SegmentCreateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The Segment has been successfully created."
          },
          "400": {
            "description": "The input does not have the correct format."
          }
        },
        "tags": [
          "Segments"
        ]
      },
      "get": {
        "operationId": "SegmentController_getAllSegments",
        "summary": "Returns all segments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The list of all segments that are stored on the blockchain.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SegmentReadDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Segments"
        ]
      }
    },
    "/segments/{index}": {
      "get": {
        "operationId": "SegmentController_getSegment",
        "summary": "Returns the segment at the specified index",
        "parameters": [
          {
            "name": "index",
            "required": true,
            "in": "path",
            "description": "The index of the searched Segment",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Segment at the specified index",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentReadDto"
                }
              }
            }
          },
          "400": {
            "description": "The specified index has not the correct format or there is no Segment at the specified index."
          }
        },
        "tags": [
          "Segments"
        ]
      }
    },
    "/segments/{index}/add-token": {
      "patch": {
        "operationId": "SegmentController_addToken",
        "summary": "Adds a token to the segment at the specified index",
        "parameters": [
          {
            "name": "index",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains the address and id of the token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenInformationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The token was successfully added to the segment"
          },
          "400": {
            "description": "The specified index has not the correct format, there is no Segment at the specified index, the token does not exist or the token has already been added to the segment."
          }
        },
        "tags": [
          "Segments"
        ]
      }
    },
    "/segments/{index}/remove-token": {
      "patch": {
        "operationId": "SegmentController_removeToken",
        "summary": "Removes a token from the segment at the specified index",
        "parameters": [
          {
            "name": "index",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains the address and id of the token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenInformationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The token was successfully removed from the segment"
          },
          "400": {
            "description": "The specified index has not the correct format, there is no Segment at the specified index, the token does not exist or the token is not part of the segment."
          }
        },
        "tags": [
          "Segments"
        ]
      }
    },
    "/tokens": {
      "post": {
        "operationId": "TokenRestController_createToken",
        "parameters": [
          {
            "name": "appendToHierarchy",
            "required": true,
            "in": "query",
            "description": "Whether the token should be appended to a hierarchy or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains all relevant information for the creation of a token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenCreateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Tokens"
        ]
      },
      "get": {
        "operationId": "TokenRestController_getTokens",
        "parameters": [
          {
            "name": "remoteId",
            "required": false,
            "in": "query",
            "description": "The remoteId of the tokens to be returned",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Tokens"
        ]
      }
    },
    "/tokens/{tokenId}": {
      "get": {
        "operationId": "TokenRestController_getToken",
        "parameters": [
          {
            "name": "tokenId",
            "required": true,
            "in": "path",
            "description": "The id of the Token to be returned",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Tokens"
        ]
      },
      "patch": {
        "operationId": "TokenRestController_updateToken",
        "parameters": [
          {
            "name": "tokenId",
            "required": true,
            "in": "path",
            "description": "The id of the token to be updated",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains the new properties of the Token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Tokens"
        ]
      },
      "delete": {
        "operationId": "TokenRestController_deleteToken",
        "parameters": [
          {
            "name": "tokenId",
            "required": true,
            "in": "path",
            "description": "The id of the Token to be burned",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "Tokens"
        ]
      }
    },
    "/tokens/{tokenId}/parents": {
      "get": {
        "operationId": "TokenRestController_getParentIds",
        "parameters": [
          {
            "name": "tokenId",
            "required": true,
            "in": "path",
            "description": "The id of the token whose parent ids are to be returned",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": true,
            "in": "query",
            "description": "The status of the parent ids to be returned ('confirmed' or 'unconfirmed')",
            "schema": {
              "enum": [
                "confirmed",
                "unconfirmed"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Tokens"
        ]
      }
    },
    "/tokens/{tokenId}/children": {
      "get": {
        "operationId": "TokenRestController_getChildIds",
        "parameters": [
          {
            "name": "tokenId",
            "required": true,
            "in": "path",
            "description": "The id of the token whose child ids are to be returned",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": true,
            "in": "query",
            "description": "The status of the child ids to be returned ('confirmed' or 'unconfirmed')",
            "schema": {
              "enum": [
                "confirmed",
                "unconfirmed"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Tokens"
        ]
      }
    },
    "/tokens/{tokenId}/segments": {
      "get": {
        "operationId": "TokenRestController_getSegments",
        "parameters": [
          {
            "name": "tokenId",
            "required": true,
            "in": "path",
            "description": "The id of the token whose segments to be returned",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Tokens"
        ]
      }
    },
    "/tokens/{tokenId}/children/{childId}/confirm": {
      "patch": {
        "operationId": "TokenRestController_confirmChild",
        "parameters": [
          {
            "name": "tokenId",
            "required": true,
            "in": "path",
            "description": "The id of the token that is the parent of the child to be confirmed",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "childId",
            "required": true,
            "in": "path",
            "description": "The id of the child to be confirmed",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Tokens"
        ]
      }
    },
    "/data-integrities/files/hash": {
      "post": {
        "operationId": "DataIntegrityController_hashFile",
        "summary": "Hash a file and return its hash",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "fileToHash": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file to hash (e.g., PDF, image, etc.)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Data Integrities"
        ]
      }
    },
    "/data-integrities/files/verify": {
      "post": {
        "operationId": "DataIntegrityController_verifyFile",
        "summary": "Verify if a file has the same hash as its original hash",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "fileToHash": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file to hash (e.g., PDF, image, etc.)"
                  },
                  "originalHash": {
                    "type": "string",
                    "format": "hexadecimal",
                    "description": "The original hash of the file, represented as a 64-character hexadecimal string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Data Integrities"
        ]
      }
    },
    "/data-integrities/strings/hash": {
      "post": {
        "operationId": "DataIntegrityController_hashString",
        "summary": "Hash a string and return its hash",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stringToHash": {
                    "type": "string",
                    "description": "The string to hash"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Data Integrities"
        ]
      }
    },
    "/data-integrities/strings/verify": {
      "post": {
        "operationId": "DataIntegrityController_verifyString",
        "summary": "Verify if a string has the same hash as its original hash",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stringToHash": {
                    "type": "string",
                    "description": "The string to hash"
                  },
                  "originalHash": {
                    "type": "string",
                    "format": "hexadecimal",
                    "description": "The original hash of the string, represented as a 64-character hexadecimal string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Data Integrities"
        ]
      }
    }
  },
  "info": {
    "title": "Blockchain Connector",
    "description": "This web API provides endpoints to manage Segments and Tokens.",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "SegmentCreateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "SegmentReadDto": {
        "type": "object",
        "properties": {
          "segmentAddress": {
            "type": "string"
          },
          "segmentName": {
            "type": "string"
          },
          "tokenInformation": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "segmentAddress",
          "segmentName",
          "tokenInformation"
        ]
      },
      "TokenInformationDto": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string"
          },
          "tokenId": {
            "type": "string"
          }
        },
        "required": [
          "tokenAddress",
          "tokenId"
        ]
      },
      "TokenAssetDto": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          }
        },
        "required": [
          "uri",
          "hash"
        ]
      },
      "TokenMetadataDto": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          }
        },
        "required": [
          "uri",
          "hash"
        ]
      },
      "TokenCreateDto": {
        "type": "object",
        "properties": {
          "remoteId": {
            "type": "string"
          },
          "asset": {
            "$ref": "#/components/schemas/TokenAssetDto"
          },
          "metadata": {
            "$ref": "#/components/schemas/TokenMetadataDto"
          },
          "additionalData": {
            "type": "string"
          },
          "parentIds": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "remoteId",
          "asset",
          "metadata",
          "additionalData",
          "parentIds"
        ]
      },
      "TokenUpdateDto": {
        "type": "object",
        "properties": {
          "assetUri": {
            "type": "string"
          },
          "assetHash": {
            "type": "string"
          },
          "metadataUri": {
            "type": "string"
          },
          "metadataHash": {
            "type": "string"
          },
          "additionalData": {
            "type": "string"
          }
        },
        "required": [
          "assetUri",
          "assetHash",
          "metadataUri",
          "metadataHash",
          "additionalData"
        ]
      }
    }
  }
}
